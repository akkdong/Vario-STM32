// IMUSensor.h
//

#ifndef __IMUSENSOR_H__
#define __IMUSENSOR_H__

#include <Arduino.h>
#include <I2CDevice.h>


///////////////////////////////////////////////////////////////////////////////////////////////
// class SensorMS5611

class SensorMS5611
{
public:
	SensorMS5611();
	
public:
//	static SensorMS5611 & GetInstance(); // singleton instance access
	
public:
	void				initSensor();
	
	boolean				dataReady();
	void				updateData();
	
	float				getTemperature();
	float				getPressure();
	float				getAltitude();
	
	static void			unlockI2C(); // I2CDevicel call this function when it's unlocked
	static void			timerProc(); // Timer interrupt handler call this function when it's called

protected:
	//
	void				unlockI2CInternal();
	void				timerProcInternal();
	
	//
	void				resetCommand();
	uint16_t			getPROMValue(int address);
	void				getDigitalValue(volatile uint32_t& value);
	
	void				convertD1();
	void				convertD2();
	
	void				readTempStep();
	void				readPressureStep();
	void				readStep();
	
	void				startTimer();
	void				restartTimer();

protected:
	// to store measures generated by interrupts
	volatile uint32_t 	d1i;
	volatile uint32_t 	d2i;

	// measure status
	volatile int 		measureStep;
	volatile boolean 	newData;

	// mutex flags
	volatile boolean 	interruptWait;

private:
	// compensated values
	boolean 			deviceReset;
	uint16_t 			c1, c2, c3, c4, c5, c6; //PROM factors
	float 				compensatedTemperature;
	float 				compensatedPressure;
};


extern SensorMS5611 ms5611;


///////////////////////////////////////////////////////////////////////////////////////////////
// class SensorMPU6050

class SensorMPU6050
{
public:
	SensorMPU6050();
	
public:
//	static SensorMPU6050 & GetInstance(); // singleton instance access
	
public:
	void				initSensor(boolean calibrateGyro = true);
	
	boolean				dataReady();
	boolean				rawReady(float * accel, float * uv, float * va);
	
	void				updateData();
	
	float				getVelocity();
	float *				getRawAccel();
	float *				getRawGyro();
	
	//
	// calibration stubs.
	// 
	void				readCalibration();
	void				saveCalibration(float * data);
	
	float *				getCalibration();
	
private:
//	float				calData[3]; // accel calibration data
	boolean				newData;
	float				vertAccel;
	
	// raw data
	float				accelData[3];
	float				gyroData[3];
};

// inline members
inline float * SensorMPU6050::getRawAccel()
	{ return accelData; }
	
inline float * SensorMPU6050::getRawGyro()
	{ return gyroData; }
	
//
extern SensorMPU6050 mpu6050;


#endif // __IMUSENSOR_H__
