// IMUSensor.h
//

#ifndef __IMUSENSOR_H__
#define __IMUSENSOR_H__

#include <Arduino.h>
#include <I2CDevice.h>


///////////////////////////////////////////////////////////////////////////////////////////////
// class SensorMS5611

class SensorMS5611
{
protected:
	SensorMS5611();
	
public:
	static SensorMS5611 & GetInstance(); // singleton instance access
	
public:
	void				initSensor();
	
	boolean				dataReady();
	void				updateData();
	
	double				getTemperature();
	double				getPressure();
	double				getAltitude();
	
	static void			UnlockI2C(); // I2CDevicel call this function when it's unlocked
	static void			TimerProc(); // Timer interrupt handler call this function when it's called

protected:
	void				resetCommand();
	uint16_t			getPROMValue(int address);
	void				getDigitalValue(volatile uint32_t& value);
	
	void				convertD1();
	void				convertD2();
	
	void				readTempStep();
	void				readPressureStep();
	void				readStep();
	
	void				startTimer();
	void				restartTimer();

protected:
	// to store measures generated by interrupts
	volatile uint32_t 	d1i;
	volatile uint32_t 	d2i;

	// measure status
	volatile int 		measureStep;
	volatile boolean 	newData;

	// mutex flags
	volatile boolean 	interruptWait;

private:
	// compensated values
	boolean 			deviceReset;
	uint16_t 			c1, c2, c3, c4, c5, c6; //PROM factors
	double 				compensatedTemperature;
	double 				compensatedPressure;
};




///////////////////////////////////////////////////////////////////////////////////////////////
// class SensorMPU6050

class SensorMPU6050
{
protected:
	SensorMPU6050();
	
public:
	static SensorMPU6050 & GetInstance(); // singleton instance access
	
public:
	void				initSensor(boolean calibrateGyro = true);
	
	boolean				dataReady();
	boolean				rawReady(double * accel, double * uv, double * va);
	
	void				updateData();
	
	double				getVelocity();
	
	//
	// calibration stubs.
	// 
	void				readCalibration();
	void				saveCalibration(double * data);
	
	double *			getCalibration();
	
private:
	double				calData[3]; // accel calibration data
	boolean				newData;
	double				vertAccel;
};

#endif // __IMUSENSOR_H__
