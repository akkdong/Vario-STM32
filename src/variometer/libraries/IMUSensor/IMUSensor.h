// IMUSensor.h
//

#ifndef __IMUSENSOR_H__
#define __IMUSENSOR_H__

#include <Arduino.h>
#include <I2CDevice.h>

///////////////////////////////////////////////////////////////////////////////////////////////
// Pressure Sensor

/* the pressure normalized sea level pressure */  
#define MS5611_BASE_SEA_PRESSURE 	(1013.25)

#define MS5611_ADDRESS 				(0x77)
#define MS5611_CMD_RESET 			(0x1E)
#define MS5611_CMD_READ_PROM 		(0xA2)
#define MS5611_CMD_CONV_D1 			(0x46)
#define MS5611_CMD_CONV_D2 			(0x58)
#define MS5611_CMD_ADC_READ 		(0x00)

#define MS5611_RESET_DELAY 			(3)
#define MS5611_CONV_DELAY 			(9)

#define MS5611_STEP_READ_TEMP 		(0)
#define MS5611_STEP_READ_PRESSURE 	(1)

/* the measure period need to be greater than 8.22 ms */
/* the library use a 1024 prescale so the time unit is 1024/F_CPU */
/* the INTERRUPT_COMPARE can't be greater than 255 */
/* but a greater value give less code interrupts */
/* the final period is 1024/F_CPU * INTERRUPT_COMPARE */
/* in seconds */
#if F_CPU >= 16000000L
//#define MS5611_INTERRUPT_COMPARE 	(130)
#define MS5611_INTERRUPT_COMPARE 	(154)
#else
//#define MS5611_INTERRUPT_COMPARE 	(66)
#define MS5611_INTERRUPT_COMPARE 	(78)
#endif
#define MS5611_INTERRUPT_START_DELAY (1000)


///////////////////////////////////////////////////////////////////////////////////////////////
// class SensorMS5611

class SensorMS5611 : public I2CDevice
{
public:
	void				initSensor();
	
	boolean				dataReady();
	void				updateData();
	
	double				getTemperature();
	double				getPressure();
	double				getAltitude();
	
private:
	void				resetCommand();
	uint16_t			getPROMValue(int address);
	void				getDigitalValue(volatile uint32_t& value);
	
	void				convertD1();
	void				convertD2();
	
	void				readTempStep();
	void				readPressureStep();
	
	void				readStep();
	
	void				setTimer();
	
private:
	// to store measures generated by interrupts
	volatile uint32_t 	d1i;
	volatile uint32_t 	d2i;

	// measure status
	volatile int 		measureStep;
	volatile boolean 	newData;

	// mutex flags
	boolean 			locked;
	boolean 			interruptWait;

	// compensated values
	boolean 			deviceReset;
	uint16_t 			c1, c2, c3, c4, c5, c6; //PROM factors
	double 				compensatedTemperature;
	double 				compensatedPressure;
};



///////////////////////////////////////////////////////////////////////////////////////////////
// Invense Gyro/Accel Sensor

/* eeprom calibration adresses */
#define VERTACCEL_EPROM_TAG 	(9806)
#define VERTACCEL_EPROM_ADDR 	(0x00)

/* accelerometer parameters */
#define VERTACCEL_G_TO_MS 		(9.80665)

#define VERTACCEL_GIRO_FSR 		(2000)
#define VERTACCEL_ACCEL_FSR 	(4)
#define VERTACCEL_FIFO_RATE 	(100)

/* 4G ~= 2^15 */
#define VERTACCEL_ACCEL_SCALE 	(8192.0)


/* 2^30 */
#define VERTACCEL_QUAT_SCALE 	(1073741824.0)



///////////////////////////////////////////////////////////////////////////////////////////////
// class SensorMPU6050

class SensorMPU6050 : public I2CDevice
{
public:
	void				initSensor();
	
	boolean				dataReady();
	void				updateData();
	
	double				getVelocity();
	
	//
	// calibration stubs.
	// 
};

#endif // __IMUSENSOR_H__
